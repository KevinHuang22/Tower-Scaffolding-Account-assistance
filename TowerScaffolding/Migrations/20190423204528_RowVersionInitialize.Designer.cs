// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TowerScaffolding.Data;

namespace TowerScaffolding.Migrations
{
    [DbContext(typeof(TowerScaffoldingContext))]
    [Migration("20190423204528_RowVersionInitialize")]
    partial class RowVersionInitialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TowerScaffolding.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerName")
                        .HasMaxLength(30);

                    b.Property<string>("Email");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("TowerScaffolding.Models.DayWork", b =>
                {
                    b.Property<int>("DayWorkID");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<int>("NumOfWorkers");

                    b.Property<decimal>("Qty");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Scaffolder");

                    b.Property<int>("TaskID");

                    b.Property<string>("Truck");

                    b.Property<string>("Type");

                    b.HasKey("DayWorkID");

                    b.HasIndex("TaskID");

                    b.ToTable("DayWork");
                });

            modelBuilder.Entity("TowerScaffolding.Models.LeadingHand", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("DriversLicence");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("ScaffoldTicket");

                    b.HasKey("ID");

                    b.ToTable("LeadingHand");
                });

            modelBuilder.Entity("TowerScaffolding.Models.Project", b =>
                {
                    b.Property<int>("SiteID");

                    b.Property<string>("Address");

                    b.Property<int>("Branch");

                    b.Property<int>("CustomerID");

                    b.Property<string>("Invoice");

                    b.Property<string>("QS");

                    b.Property<string>("Quote");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Site");

                    b.Property<string>("SiteManager");

                    b.Property<int>("Status");

                    b.Property<string>("TowerManager");

                    b.HasKey("SiteID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("TowerScaffolding.Models.Task", b =>
                {
                    b.Property<int>("TaskID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime>("Date");

                    b.Property<TimeSpan>("Finish");

                    b.Property<int>("H");

                    b.Property<int>("LeadingHandID");

                    b.Property<int>("NumberOfStaff");

                    b.Property<string>("Progress");

                    b.Property<int?>("Quality");

                    b.Property<int?>("Returned");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("S");

                    b.Property<int>("SiteID");

                    b.Property<string>("Staff");

                    b.Property<TimeSpan>("Start");

                    b.Property<int>("TaskStatus");

                    b.Property<int>("U");

                    b.Property<string>("Vehicle");

                    b.Property<string>("WorkDescription");

                    b.HasKey("TaskID");

                    b.HasIndex("LeadingHandID");

                    b.HasIndex("SiteID");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("TowerScaffolding.Models.DayWork", b =>
                {
                    b.HasOne("TowerScaffolding.Models.Task", "Task")
                        .WithMany("DayWorks")
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TowerScaffolding.Models.Project", b =>
                {
                    b.HasOne("TowerScaffolding.Models.Customer", "Customer")
                        .WithMany("Projects")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TowerScaffolding.Models.Task", b =>
                {
                    b.HasOne("TowerScaffolding.Models.LeadingHand", "LeadingHand")
                        .WithMany("Tasks")
                        .HasForeignKey("LeadingHandID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TowerScaffolding.Models.Project", "Site")
                        .WithMany("Tasks")
                        .HasForeignKey("SiteID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
